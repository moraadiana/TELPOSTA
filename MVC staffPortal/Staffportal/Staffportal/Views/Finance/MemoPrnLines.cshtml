@model Staffportal.Models.Finance
@{
    ViewBag.Title = $"Memo prn lines for memo number {Model.DocumentNo}";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-xxl flex-grow-1 container-p-y">
    <div class="row">
        <div class="col-lg-12 mb-4 order-0">
            <div class="card">
                <div class="card-body">
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible" role="alert">
                            @TempData["Error"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    @if (TempData["Success"] != null)
                    {
                        <div class="alert alert-success alert-dismissible" role="alert">
                            @TempData["Success"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="text-uppercase">Memo Prn Lines - <span class="text-primary">@Model.DocumentNo</span></h5>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item active">Dashboard</li>
                                <li class="breadcrumb-item">
                                    <a href="@Url.Action("index","dashboard")">Memo Prn Lines</a>
                                </li>
                            </ol>
                        </nav>
                    </div>
                    <div class="dropdown-divider"></div>
                    @if (Model.Status == "Pending")
                    {
                        <form action="@Url.Action("memoprnlines","finance")" method="post">
                            <input name="DocumentNo" value="@Model.DocumentNo" class="form-control" type="hidden" />
                            <input name="Status" value="@Model.Status" class="form-control" type="hidden" />
                            <div class="row mt-4">
                                <div class="col-md-3">
                                    <label class="form-label">Memo No</label><br />
                                    <label class="text-primary">@Model.DocumentNo</label>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Type</label>
                                    <select name="Type" class="form-control" id="item-type">
                                        <option value="0">G/L Account</option>
                                        <option value="1">Item</option>
                                        <option value="2">Fixed Asset</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Description</label>
                                    <select name="Description" class="form-control" required id="item-description"></select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Directorate</label>
                                    @Html.DropDownListFor(m => m.Directorate, new SelectList(Model.Directorates, "Code", "Description"), "--Select Item--", new { @class = "form-control" })
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Department</label>
                                    @Html.DropDownListFor(m => m.Department, new SelectList(Model.Departments, "Code", "Description"), "--Select Item--", new { @class = "form-control" })
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Project Code</label>
                                    @Html.DropDownListFor(m => m.Project, new SelectList(Model.Projects, "Code", "Description"), "--Select Item--", new { @class = "form-control", id = "project-code" })
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Activity Code</label>
                                    <select name="Activity" class="form-control" id="activity-code"></select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Issuing Store</label>
                                    @Html.DropDownListFor(m => m.IssuingStore, new SelectList(Model.IssuingStores, "Code", "Description"), new { @class = "form-control" })
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Quantity</label>
                                    <input type="number" name="Quantity" class="form-control" placeholder="Quantity" required />
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Amount</label>
                                    <input type="number" name="Amount" class="form-control" placeholder="Unit Cost" required />
                                </div>
                                <div class="col-md-12">
                                    <label class="form-label">Description</label>
                                    <textarea name="Purpose" class="form-control" placeholder="Type your description here..."></textarea>
                                </div>
                                <div class="col-md-12">
                                    <button type="submit" class="btn btn-primary bx-pull-right"><i class="bx bx-pencil" onclick="return validateInputs()"></i> Add</button>
                                </div>
                            </div>
                        </form>
                    }
                    <div class="row mt-4">
                        <div class="col-md-12">
                            <h4>Memo Prn Lines</h4>
                        </div>
                        <div class="col-md-12">
                            <div class="table-responsive text-wrap">
                                <table id="example" class="table table-hover table-striped text-start">
                                    <thead>
                                        <tr>
                                            <th>Document No</th>
                                            <th>No</th>
                                            <th>Description</th>
                                            <th>Quantity</th>
                                            <th>Total Amount</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.MemoPrnLines)
                                        {
                                            <tr>
                                                <td>@Model.DocumentNo</td>
                                                <td>@item.ItemNo</td>
                                                <td>@item.Description</td>
                                                <td>@item.Quantity</td>
                                                <td>@String.Format(@"{0:#,##0.00}", item.TotalAmount)</td>
                                                <td><a href="@Url.Action("removememoline", "finance", new {id=item.SystemId, memoNo=Model.DocumentNo,status=Model.Status,query="prn"})" class="text-danger"><i class="bx bx-trash-alt"></i></a></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="col-md-12 d-flex justify-content-between align-items-center">
                            @if (Model.Status == "Open" || Model.Status == "Pending")
                            {
                                <a href="@Url.Action("sendmemoapproval","finance", new {memoNo = Model.DocumentNo,status=Model.Status, query="prn"})" class="btn btn-success">Send Approval</a>
                            }
                            else if (Model.Status == "Pending Approval")
                            {
                                <a href="@Url.Action("cancelmemoapproval","finance", new {memoNo = Model.DocumentNo,status=Model.Status, query="prn"})" class="btn btn-danger">Cancel Approval</a>
                            }
                            <a href="@Url.Action("navigatememolines", "finance", new {memoNo=Model.DocumentNo, status=Model.Status})" class="btn btn-primary">Next</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    const itemDescription = document.getElementById('item-description');
    const itemType = document.getElementById('item-type');
    const projectCode = document.getElementById('project-code');
    const activityCode = document.getElementById('activity-code');

    const getGlAccounts = async function () {
        itemDescription.innerHTML = '';
        const response = await fetch('/api/getglaccounts');
        const result = await response.json();
        console.log(result);
        let html = '';

        result.forEach(function (item, i, arr) {
            html += `<option value='${item.Code}'>${item.Description}</option>`;
        })
        itemDescription.innerHTML = html;
    }
    getGlAccounts();

    const getItems = async function () {
        itemDescription.innerHTML = '';
        const response = await fetch('/api/getitems');
        const result = await response.json();
        console.log(result);
        let html = '';

        result.forEach(function (item, i, arr) {
            html += `<option value='${item.Code}'>${item.Description}</option>`;
        })
        itemDescription.innerHTML = html;
    }

    const getFixedAssets = async function () {
        itemDescription.innerHTML = '';
        const response = await fetch('/api/getfixedassets');
        const result = await response.json();
        console.log(result);
        let html = '';

        result.forEach(function (item, i, arr) {
            html += `<option value='${item.Code}'>${item.Description}</option>`;
        })
        itemDescription.innerHTML = html;
    }

    const getActivities = async function () {
        const project = projectCode.value;
        activityCode.innerHTML = '';
        const response = await fetch(`/api/getactivities?project=${project}`);
        const result = await response.json();
        console.log(result);
        let html = "<option value=''>--Select Item--</option>";

        result.forEach(function (item, i, arr) {
            html += `<option value='${item.Code}'>${item.Description}</option>`;
        })
        activityCode.innerHTML = html;
    }
    getActivities();

    itemType.addEventListener('change', function () {
        const type = itemType.value;
        if (type === "0") getGlAccounts();
        else if (type === "1") getItems();
        else getFixedAssets();
    });

    projectCode.addEventListener('change', getActivities);

    const validateInputs = function () {
        if (itemDescription.value === '') {
            alert('Description cannot be null!');
            return false;
        }
    }
</script>